<templateSet group="CompetitiveProg">
  <template name="comprog" value="import java.io.*;&#10;&#10;public class $CLASS$ {&#10;  private static class HpReader {&#10;    private int lineIndex = -1;&#10;    private int[] lineIntMem;&#10;    private long[] lineLongMem;&#10;    private BufferedReader in;&#10;&#10;    public HpReader(String dir, String inFile, String outFile) {&#10;      initAndRedirectInOut(dir, inFile, outFile);&#10;    }&#10;&#10;    private int ivl(String val) {&#10;      return Integer.parseInt(val);&#10;    }&#10;&#10;    private long lvl(String val) {&#10;      return Long.parseLong(val);&#10;    }&#10;&#10;    private void initAndRedirectInOut(String dir, String inFile, String outFile) {&#10;      if (dir != null) {&#10;        try {&#10;          String containingDirPath = dir.endsWith(File.separator) ? dir : dir + File.separator;&#10;          if (isDebug &amp;&amp; inFile != null)&#10;            System.setIn(new FileInputStream(new File(containingDirPath + inFile)));&#10;          if (isDebug &amp;&amp; outFile != null)&#10;            System.setOut(new PrintStream(new File(containingDirPath + outFile)));&#10;        } catch (FileNotFoundException e) {&#10;          // Do nothing, stdin &amp; stdout are not redirected&#10;        }&#10;      }&#10;      in = new BufferedReader(new InputStreamReader(System.in));&#10;      out = new PrintWriter(System.out);&#10;    }&#10;&#10;    private String nextSingleStr() throws IOException {&#10;      return in.readLine();&#10;    }&#10;&#10;    private String[] nextLineStr() throws IOException {&#10;      return nextLineStr(0);&#10;    }&#10;&#10;    private String[] nextLineStr(int offset) throws IOException {&#10;      String[] inp = nextSingleStr().split(&quot; &quot;);&#10;      String[] rs = new String[offset + inp.length];&#10;      System.arraycopy(inp, 0, rs, offset, inp.length);&#10;      return rs;&#10;    }&#10;&#10;    private int nextSingleInt() throws IOException {&#10;      if (lineIndex == -1 || lineIndex == lineIntMem.length) {&#10;        lineIndex = 0;&#10;        lineIntMem = nextLineInt();&#10;      }&#10;&#10;      return lineIntMem[lineIndex++];&#10;    }&#10;&#10;    private int[] nextLineInt() throws IOException {&#10;      return nextLineInt(0);&#10;    }&#10;&#10;    private int[] nextLineInt(int offset) throws IOException {&#10;      String[] inp = nextLineStr();&#10;      int[] rs = new int[offset + inp.length];&#10;      for (int i = 0; i &lt; inp.length; i++) rs[offset + i] = ivl(inp[i]);&#10;      return rs;&#10;    }&#10;&#10;    private long nextSingleLong() throws IOException {&#10;      if (lineIndex == -1 || lineIndex == lineLongMem.length) {&#10;        lineIndex = 0;&#10;        lineLongMem = nextLineLong();&#10;      }&#10;&#10;      return lineLongMem[lineIndex++];&#10;    }&#10;&#10;    private long[] nextLineLong() throws IOException {&#10;      return nextLineLong(0);&#10;    }&#10;&#10;    private long[] nextLineLong(int offset) throws IOException {&#10;      String[] inp = nextLineStr();&#10;      long[] rs = new long[offset + inp.length];&#10;      for (int i = 0; i &lt; inp.length; i++) rs[offset + i] = lvl(inp[i]);&#10;      return rs;&#10;    }&#10;&#10;    private int[][] nextMatInt(int lineCount) throws IOException {&#10;      return nextMatInt(lineCount, 0, 0);&#10;    }&#10;&#10;    private int[][] nextMatInt(int lineCount, int rowOffset, int colOffset) throws IOException {&#10;      int[][] rs = new int[rowOffset + lineCount][];&#10;      for (int i = rowOffset; i &lt; rs.length; i++) rs[i] = nextLineInt(colOffset);&#10;      return rs;&#10;    }&#10;  }&#10;&#10;  private static class HpHelper {&#10;    private static final String LOCAL_DEBUG_FLAG = &quot;COM_PROG_DEBUG&quot;;&#10;&#10;    private static boolean isDebug() {&#10;      try {&#10;        return Boolean.parseBoolean(System.getenv(HpHelper.LOCAL_DEBUG_FLAG));&#10;      } catch (Exception e) {&#10;        return false;&#10;      }&#10;    }&#10;&#10;    private static String createDelimiter(String delimiter) {&#10;      return delimiter == null ? &quot; &quot; : delimiter;&#10;    }&#10;&#10;    private static void println(int[] data, String delimiter) {&#10;      delimiter = createDelimiter(delimiter);&#10;      for (int t : data) out.print(t + delimiter);&#10;      out.println();&#10;    }&#10;&#10;    private static void println(long[] data, String delimiter) {&#10;      delimiter = createDelimiter(delimiter);&#10;      for (long t : data) out.print(t + delimiter);&#10;      out.println();&#10;    }&#10;&#10;    private static &lt;T&gt; void println(T[] data, String delimiter) {&#10;      delimiter = createDelimiter(delimiter);&#10;      for (T t : data) {&#10;        if (t instanceof int[]) {&#10;          println((int[]) t, delimiter);&#10;        } else if (t instanceof long[]) {&#10;          println((long[]) t, delimiter);&#10;        } else if (t instanceof Object[]) {&#10;          println((Object[]) t, delimiter);&#10;        } else {&#10;          out.print(t + delimiter);&#10;        }&#10;      }&#10;      out.println();&#10;    }&#10;  }&#10;&#10;  private static boolean isDebug = HpHelper.isDebug();&#10;  private static HpReader in = new HpReader(&quot;/Users/henryhuypham/Workspace/CompetitiveProg&quot;, &quot;in.txt&quot;, null);&#10;  private static PrintWriter out;&#10;&#10;  public static void main(String[] args) throws IOException {&#10;    $END$&#10;&#10;    out.flush();&#10;  }&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <variable name="CLASS" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="bsLeft" value="private static int binarySearchLeft(int[] data, int value) {&#10;  int l = 0, r = data.length;&#10;  while (l &lt; r) {&#10;    int mid = (l + r) / 2;&#10;    if (data[mid] &lt; value) {&#10;      l = mid + 1;&#10;    } else {&#10;      r = mid;&#10;    }&#10;  }&#10;&#10;  return l;&#10;}" description="Binary Search for the leftmost item" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="bsRight" value="private static int binarySearchRight(int[] data, int value) {&#10;  int l = 0, r = data.length;&#10;  while (l &lt; r) {&#10;    int mid = (l + r) / 2;&#10;    if (data[mid] &lt;= value) {&#10;      l = mid + 1;&#10;    } else {&#10;      r = mid;&#10;    }&#10;  }&#10;&#10;  return l - 1;&#10;}" description="Binary Search for the rightmost item" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
</templateSet>